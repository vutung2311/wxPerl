#############################################################################
## Name:        viface/PropertyGridInterface.xsp
## Purpose:     XS++ for wxPropertyGridInterface
## Author:      Mark Dootson
## Modified by:
## Created:     04/03/2012
## RCS-ID:      $Id:$
## Copyright:   (c) 2012 Mattia Barbon
## Licence:     This program is free software; you can redistribute it and/or
##              modify it under the same terms as Perl itself
#############################################################################

%file{xspp/PropertyGridInterface.h};

%module{Wx};

#if WXPERL_W_VERSION_GE( 2, 9, 3 ) && wxUSE_PROPGRID

%loadplugin{build::Wx::XSP::Overload};

%name{Wx::PGPGridInterfaceBase} class wxPGPGridInterfaceBase
{

public:

    /*
    virtual wxPGVIterator GetVIterator( int flags ) const;

    virtual bool IsPropertySelected( wxString& id ) const %Overload;
	
	void ShowPropertyError( wxString& id, const wxString& msg );
	*/
	
    wxPGProperty* Append( wxPGProperty* property );

    wxPGProperty* AppendIn( wxString& id, wxPGProperty* newProperty );
	
    void BeginAddChildren( wxString& id );

    bool ClearSelection( bool validation = false);

    void ClearModifiedStatus();

    bool Collapse( wxString& id );

    bool CollapseAll();

#ifndef WXPERL_IN_PROPERTYGRID

    bool ChangePropertyValue( wxString& id, wxVariantArg newValue );
	
#endif

    void DeleteProperty( wxString& id );

    bool DisableProperty( wxString& id );

    bool EditorValidate();

    bool EnableProperty( wxString& id, bool enable = true );

    void EndAddChildren( wxString& id );

    bool Expand( wxString& id );

    bool ExpandAll( bool expand = true );

    int GetColumnProportion( unsigned int column ) const;

    wxPGProperty* GetFirstChild( wxString& id );

    %name{GetIteratorPropertyOverload} wxPropertyGridIterator GetIterator( int flags = wxPG_ITERATE_DEFAULT,
                                        wxPGProperty* firstProp = NULL ) %Overload;
    /*
    wxPropertyGridConstIterator GetIterator( int flags = wxPG_ITERATE_DEFAULT,
                                             wxPGProperty* firstProp = NULL ) const;
    */
    
    %name{GetIteratorPosOverload} wxPropertyGridIterator GetIterator( int flags, int startPos ) %Overload;
    /*
    wxPropertyGridConstIterator GetIterator( int flags, int startPos ) const;
    */
    
    wxPGProperty* GetFirst( int flags = wxPG_ITERATE_ALL )
        %code{% RETVAL = THIS->wxPropertyGridInterface::GetFirst( flags ); %};

    wxPGProperty* GetProperty( const wxString& name ) const;
/*
    void GetPropertiesWithFlag( wxArrayPGProperty* targetArr,
                                wxByte flags,
                                bool inverse = false,
                                int iterFlags = wxPerl_build_default_propertyflags ) const;
*/

%{

void
wxPGPGridInterfaceBase::GetPropertiesWithFlag(wxByte flags, bool inverse = false, int iterFlags = wxPerl_build_default_propertyflags )
  PREINIT:
    wxArrayPGProperty* targetArr;
  PPCODE:
    THIS->GetPropertiesWithFlag( targetArr, flags, inverse, iterFlags );
    size_t num = targetArr->GetCount();
    EXTEND( SP, (IV)num );
    for( size_t i = 0; i < num; ++i )
    {
        PUSHs( wxPli_object_2_sv( aTHX_ sv_newmortal(), targetArr->Item( i ) ) );
    }    
   
%}

    wxVariant GetPropertyAttribute( wxString& id, const wxString& attrName ) const;

    wxColour GetPropertyBackgroundColour( wxString& id ) const;

#if !defined(WXPERL_IN_PROPERTYGRIDPAGE)

    wxPropertyCategory* GetPropertyCategory( wxString& id ) const;
	wxPGProperty* GetPropertyByLabel( const wxString& label ) const;

#endif

    /** Returns client data (void*) of a property. */
    /*
    void* GetPropertyClientData( wxString& id ) const;
    */
    
    /* wxPliUserDataCD* GetPropertyClientData( wxString& id ) const
      %code{% RETVAL = (wxPliUserDataCD*)THIS->GetPropertyClientObject( id ); %}; */

    %name{GetPropertyByNameName} wxPGProperty* GetPropertyByName( const wxString& name ) const %Overload;

    %name{GetPropertyByNameSubName} wxPGProperty* GetPropertyByName( const wxString& name,
                                     const wxString& subname ) const %Overload;

    const wxPGEditor* GetPropertyEditor( wxString& id ) const;

    wxString GetPropertyHelpString( wxString& id ) const;

    wxBitmap* GetPropertyImage( wxString& id ) const;

    const wxString& GetPropertyLabel( wxString& id );

    wxString GetPropertyName( wxPGProperty* property );

    wxColour GetPropertyTextColour( wxString& id ) const;

    wxValidator* GetPropertyValidator( wxString& id );

    wxVariant GetPropertyValue( wxString& id );

    wxArrayInt GetPropertyValueAsArrayInt( wxString& id ) const;

    wxArrayString GetPropertyValueAsArrayString( wxString& id ) const;

    bool GetPropertyValueAsBool( wxString& id ) const;

    wxDateTime GetPropertyValueAsDateTime( wxString& id ) const;

    double GetPropertyValueAsDouble( wxString& id ) const;

    int GetPropertyValueAsInt( wxString& id ) const;

    long GetPropertyValueAsLong( wxString& id ) const;

    wxLongLong_t GetPropertyValueAsLongLong( wxString& id ) const;

    wxString GetPropertyValueAsString( wxString& id ) const;

    unsigned long GetPropertyValueAsULong( wxString& id ) const;

    wxULongLong_t GetPropertyValueAsULongLong( wxString& id ) const;

    wxVariant GetPropertyValues( const wxString& listname = wxEmptyString,
                                 wxPGProperty* baseparent = NULL, long flags = 0 ) const;

    /**
        Returns list of currently selected properties.

        @remarks wxArrayPGProperty should be compatible with std::vector API.
    */
    /* TODO FIXME
    const wxArrayPGProperty& GetSelectedProperties() const;
    */
%{

void
wxPGPGridInterfaceBase::GetSelectedProperties( )
  PPCODE:
    const wxArrayPGProperty& targetArr = THIS->GetSelectedProperties();
    size_t num = targetArr.GetCount();
    EXTEND( SP, (IV)num );
    for( size_t i = 0; i < num; ++i )
    {
        PUSHs( wxPli_object_2_sv( aTHX_ sv_newmortal(), targetArr.Item( i ) ) );
    }    

%}

#if !defined(WXPERL_IN_PROPERTYGRID) && !defined(WXPERL_IN_PROPERTYGRIDMANAGER)

    wxPGProperty* GetSelection() const;

#endif

    bool HideProperty( wxString& id, bool hide = true, int flags = wxPG_RECURSE );

    static void InitAllTypeHandlers();

    %name{InsertOLProps} wxPGProperty* Insert( wxString& priorThis, wxPGProperty* newProperty ) %Overload;

    %name{InsertOLIndex} wxPGProperty* Insert( wxString& parent, int index, wxPGProperty* newProperty ) %Overload;

    bool IsPropertyCategory( wxString& id ) const;

    bool IsPropertyEnabled( wxString& id ) const;

    bool IsPropertyExpanded( wxString& id ) const;

    bool IsPropertyModified( wxString& id ) const;

    bool IsPropertyShown( wxString& id ) const;

    bool IsPropertyValueUnspecified( wxString& id ) const;

    void LimitPropertyEditing( wxString& id, bool limit = true );

    static void RegisterAdditionalEditors();

    wxPGProperty* RemoveProperty( wxString& id );

    wxPGProperty* ReplaceProperty( wxString& id, wxPGProperty* property );

    bool RestoreEditableState( const wxString& src,
                               int restoreStates = 0x3F );

    wxString SaveEditableState( int includedStates = 0x3F ) const;

    static void SetBoolChoices( const wxString& trueChoice,
                                const wxString& falseChoice );

    bool SetColumnProportion( unsigned int column, int proportion );

    void SetPropertyAttribute( wxString& id, const wxString& attrName,
                               wxVariantArg value, long argFlags = 0 );

    void SetPropertyAttributeAll( const wxString& attrName, wxVariantArg value );

    void SetPropertyBackgroundColour( wxString& id,
                                      const wxColour& colour,
                                      int flags = wxPG_RECURSE );


    void SetPropertyCell( wxString& id, int column,
                          const wxString& text = wxEmptyString,
                          const wxBitmap& bitmap = wxNullBitmapPtr,
                          const wxColour& fgCol = wxNullColourPtr,
                          const wxColour& bgCol = wxNullColourPtr );

    /* 
    void SetPropertyClientData( wxString& id, void* clientData );
    */
	
	/* %name{SetPropertyClientData} void SetPropertyClientObject( wxString& id, wxPliUserDataCD* data ); */
    
    void SetPropertyColoursToDefault( wxString& id );

    void SetPropertyEditor( wxString& id, const wxPGEditor* editor );

    void SetPropertyEditor( wxString& id, const wxString& editorName );

    void SetPropertyLabel( wxString& id, const wxString& newproplabel );

    void SetPropertyName( wxString& id, const wxString& newName );

    void SetPropertyReadOnly( wxString& id, bool set = true,
                              int flags = wxPG_RECURSE );

    void SetPropertyValueUnspecified( wxString& id );
    
    /*
    void SetPropertyValues( const wxVariantList& list,
                            wxPGProperty& defaultCategory = wxNullPropertyPtr );
    */
    
    void SetPropertyValues( const wxVariant& list, wxString& defaultCategory  );
    /*
    void SetPropertyHelpString(  const wxString& str, const wxString& helpString )
	 %code{% wxPGPropArgCls id = wxPGPropArgCls( str );
	         THIS->SetPropertyHelpString( id, helpString ); %};
	*/
	
	void SetPropertyHelpString( wxString& id , const wxString& helpString );
	
    void SetPropertyImage( wxString& id, wxBitmap& bmp );

    bool SetPropertyMaxLength( wxString& id, int maxLen );

    void SetPropertyTextColour( wxString& id,
                                const wxColour& colour,
                                int flags = wxPG_RECURSE );

    void SetPropertyValidator( wxString& id, const wxValidator& validator );

    /** Sets value (integer) of a property. */
    %name{SetPropertyValueAsLong} void SetPropertyValue( wxString& id, long value );

    /** Sets value (integer) of a property. */
    %name{SetPropertyValueAsInt} void SetPropertyValue( wxString& id, int value );

    /** Sets value (floating point) of a property. */
    %name{SetPropertyValueAsDouble} void SetPropertyValue( wxString& id, double value );

    /** Sets value (bool) of a property. */
    %name{SetPropertyValueAsBool} void SetPropertyValue( wxString& id, bool value );

    /** Sets value (string) of a property. */
    %name{SetPropertyValueAsString} void SetPropertyValue( wxString& id, const wxString& value );

    /** Sets value (wxArrayString) of a property. */
    %name{SetPropertyValueAsArrayString} void SetPropertyValue( wxString& id, const wxArrayString& value );

    /** Sets value (wxDateTime) of a property. */
    %name{SetPropertyValueAsDateTime} void SetPropertyValue( wxString& id, const wxDateTime& value );

    /** Sets value (wxObject*) of a property. */
    %name{SetPropertyValueAsObject} void SetPropertyValue( wxString& id, wxObject* value );

    /** Sets value (wxObject&) of a property. */
    /** void SetPropertyValue( wxString& id, wxObject& value ); */

    /** Sets value (native 64-bit int) of a property. */
    %name{SetPropertyValueAsLongLong} void SetPropertyValue( wxString& id, wxLongLong_t value );

    /** Sets value (native 64-bit unsigned int) of a property. */
    %name{SetPropertyValueAsUnsignedLongLong} void SetPropertyValue( wxString& id, wxULongLong_t value );

    /** Sets value (wxArrayInt&) of a property. */
    %name{SetPropertyValueAsArrayInt} void SetPropertyValue( wxString& id, const wxArrayInt& value );

    void SetPropertyValueString( wxString& id, const wxString& value );

    /**
        Sets value (wxVariant&) of a property.

        @remarks Use wxPropertyGrid::ChangePropertyValue() instead if you need to
                run through validation process and send property change event.
    */
    %name{SetPropertyValueVariant} void SetPropertyValue( wxString& id, wxVariant value );

    void SetValidationFailureBehavior( int vfbFlags );

    void Sort( int flags = 0 );

    void SortChildren( wxString& id, int flags = 0 );

    static wxPGEditor* GetEditorByName( const wxString& editorName );
};

#endif

%file{-};


