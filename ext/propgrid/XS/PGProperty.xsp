#############################################################################
## Name:        ext/propgrid/XS/PGProperty.xsp
## Purpose:     XS++ for Wx::PGProperty
## Author:      Mark Dootson
## Modified by:
## Created:     04/03/2012
## RCS-ID:      $Id: $
## Copyright:   (c) 2012 Mattia Barbon
## Licence:     This program is free software; you can redistribute it and/or
##              modify it under the same terms as Perl itself
#############################################################################

%module{Wx};

#if WXPERL_W_VERSION_GE( 2, 9, 3 ) && wxUSE_PROPGRID

%loadplugin{build::Wx::XSP::Overload};
%loadplugin{build::Wx::XSP::Virtual};

/***********************************************************************************
 *
 * Wx::PGProperty
 * 
 * *********************************************************************************/

%name{Wx::PGProperty} class wxPGProperty : public %name{Wx::Object} wxObject

{
    %NoVirtualBase;
    %VirtualImplementation{
        %Name{wxPlPGProperty};
        %Declaration{% WXPLI_DECLARE_DYNAMIC_CLASS( wxPlPGProperty ); %};
        %Implementation{% WXPLI_IMPLEMENT_DYNAMIC_CLASS( wxPlPGProperty, wxPGProperty ); %};
        %ForceAbstract;
    };

%{
static void
wxPGProperty::CLONE()
  CODE:
    wxPli_thread_sv_clone( aTHX_ CLASS, (wxPliCloneSV)wxPli_detach_object );
%}

public:
    /* typedef wxUint32 FlagType; */
    
    %name{newDefault} wxPGProperty() %Overload;

    %name{newFull} wxPGProperty( const wxString& label, const wxString& name ) %Overload;

    ~wxPGProperty()
        %code%{  wxPli_thread_sv_unregister( aTHX_ "Wx::PGProperty", THIS, ST(0) );
                 delete THIS;
               %};

    virtual void OnSetValue() %Virtual;

    virtual wxVariant DoGetValue() const %Virtual;

    virtual bool ValidateValue( wxVariant& value, wxPGValidationInfo& validationInfo ) const %Virtual;
    
    /* TODO
    virtual bool StringToValue( wxVariant& variant, const wxString& text, int argFlags = 0 ) const;
    virtual bool IntToValue( wxVariant& variant, int number, int argFlags = 0 ) const;
    */

    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const %Virtual;

    bool SetValueFromString( const wxString& text, int flags = 0 );

    bool SetValueFromInt( long value, int flags = 0 );

    virtual wxSize OnMeasureImage( int item = -1 ) const %Virtual;

    virtual bool OnEvent( wxPropertyGrid* propgrid, wxWindow* wnd_primary, wxEvent& event ) %Virtual;

    virtual wxVariant ChildChanged( wxVariant& thisValue,
                                    int childIndex,
                                    wxVariant& childValue ) const %Virtual;

    virtual const wxPGEditor* DoGetEditorClass() const %Virtual;

    virtual wxValidator* DoGetValidator () const %Virtual;

    /* TODO FIXME
    virtual void OnCustomPaint( wxDC& dc, const wxRect& rect, wxPGPaintData& paintdata ) %Virtual;
    */

    virtual wxPGCellRenderer* GetCellRenderer( int column ) const %Virtual;

    virtual int GetChoiceSelection() const %Virtual;

    virtual void RefreshChildren() %Virtual;

    virtual bool DoSetAttribute( const wxString& name, wxVariant& value ) %Virtual;

    virtual wxVariant DoGetAttribute( const wxString& name ) const %Virtual;

    virtual wxPGEditorDialogAdapter* GetEditorDialog() const %Virtual;

    virtual void OnValidationFailure( wxVariant& pendingValue ) %Virtual;

    int AddChoice( const wxString& label, int value = wxPG_INVALID_VALUE );

    void AddPrivateChild( wxPGProperty* prop );

    void AdaptListToValue( wxVariant& list, wxVariant* value ) const;

    wxPGProperty* AppendChild( wxPGProperty* childProperty );

    bool AreAllChildrenSpecified( wxVariant* pendingList = NULL ) const;
    
    bool AreChildrenComponents() const;

    void ChangeFlag( wxPGPropertyFlags flag, bool set );

    void DeleteChildren();

    void DeleteChoice( int index );

    /* void Empty(); */
    
    void Enable( bool enable = true );

    wxString GenerateComposedValue() const;

    wxVariant GetAttribute( const wxString& name ) const;

    wxString GetAttribute( const wxString& name, const wxString& defVal ) const;

    long GetAttributeAsLong( const wxString& name, long defVal ) const;

    double GetAttributeAsDouble( const wxString& name, double defVal ) const;

    wxVariant GetAttributesAsList() const;

    const wxPGEditor* GetColumnEditor( int column ) const;

    const wxString& GetBaseName() const;

    const wxPGCell& GetCell( unsigned int column ) const;

    wxPGCell& GetCell( unsigned int column );

    wxPGCell& GetOrCreateCell( unsigned int column );

    unsigned int GetChildCount() const;

    int GetChildrenHeight( int lh, int iMax = -1 ) const;

    const wxPGChoices& GetChoices() const;
    
    /* TODO FIXME
    void* GetClientData() const;

    wxClientData *GetClientObject() const;
    */

    wxVariant GetDefaultValue() const;

    wxString GetDisplayedString() const;

    const wxPGEditor* GetEditorClass() const;

    wxUint32 GetFlags() const;

    wxPropertyGrid* GetGrid() const;

    wxPropertyGrid* GetGridIfDisplayed() const;

    const wxString& GetHelpString() const;

    unsigned int GetIndexInParent() const;

    const wxString& GetLabel() const;

    const wxPGProperty* GetLastVisibleSubItem() const;

    wxPGProperty* GetMainParent() const;

    int GetMaxLength() const;

    wxString GetName() const;

    wxPGProperty* GetParent() const;

    wxPGProperty* GetPropertyByName( const wxString& name ) const;

    wxValidator* GetValidator() const;

    wxVariant GetValue() const;

    wxBitmap* GetValueImage() const;

    virtual wxString GetValueAsString( int argFlags = 0 ) const %Virtual;

    wxString GetValueType() const;

    int GetY() const;

    wxUint32 HasFlag( wxPGPropertyFlags flag ) const;

    bool HasVisibleChildren() const;

    bool Hide( bool hide, int flags = wxPG_RECURSE );

    int Index( const wxPGProperty* p ) const;

    wxPGProperty* InsertChild( int index, wxPGProperty* childProperty );

    int InsertChoice( const wxString& label, int index, int value = wxPG_INVALID_VALUE );

    bool IsCategory() const;

    bool IsEnabled() const;

    bool IsExpanded() const;

    bool IsRoot() const;

    bool IsSomeParent( wxPGProperty* candidateParent ) const;

    bool IsTextEditable() const;

    bool IsValueUnspecified() const;

    bool IsVisible() const;

    wxPGProperty* Item( unsigned int i ) const;

    void RefreshEditor();

    void SetAttribute( const wxString& name, wxVariant value );

    void SetAutoUnspecified( bool enable = true );

    void SetBackgroundColour( const wxColour& colour,
                              int flags = wxPG_RECURSE );

    %name{SetEditorOLEditor} void SetEditor( const wxPGEditor* editor ) %Overload;

    %name{SetEditorOLString} void SetEditor( const wxString& editorName ) %Overload;

    void SetCell( int column, const wxPGCell& cell );

    bool SetChoices( wxPGChoices& choices );

    /* TODO FIXME
    void SetClientData( void* clientData );
   
    void SetClientObject(wxClientData* clientObject);
    */

    void SetChoiceSelection( int newValue );

    void SetDefaultValue( wxVariant& value );

    void SetFlagRecursively( wxPGPropertyFlags flag, bool set );

    void SetHelpString( const wxString& helpString );

    void SetLabel( const wxString& label );

    bool SetMaxLength( int maxLen );

    void SetModifiedStatus( bool modified );

    void SetName( const wxString& newName );

    void SetParentalType( int flag );

    void SetTextColour( const wxColour& colour,
                        int flags = wxPG_RECURSE );

    void SetValidator( const wxValidator& validator );

    void SetValue( wxVariant value, wxVariant* pList = NULL,
                   int flags = wxPG_SETVAL_REFRESH_EDITOR );

    void SetValueImage( wxBitmap& bmp );

    void SetValueInEvent( wxVariant value ) const;

    void SetValueToUnspecified();
    
    void SetWasModified( bool set = true );

    wxPGProperty* UpdateParentValues();

    bool UsesAutoUnspecified() const;
    
};


%name{Wx::PGPropArgCls} class wxPGPropArgCls

{
    
%{
static void
wxPGPropArgCls::CLONE()
  CODE:
    wxPli_thread_sv_clone( aTHX_ CLASS, (wxPliCloneSV)wxPli_detach_object );
%}

public:
    %name{newDefault} wxPGPropArgCls() %Overload;
    
    %name{newProperty} wxPGPropArgCls( const wxPGProperty* property ) %Overload;
    
    %name{newString} wxPGPropArgCls( const wxString& str ) %Overload;
    
    %name{newCopy} wxPGPropArgCls( const wxPGPropArgCls& id ) %Overload;
    
    /*
    wxPGPropArgCls( const char* str );
    wxPGPropArgCls( const wchar_t* str );
    wxPGPropArgCls( int );
    */
    
    ~wxPGPropArgCls()
        %code%{  wxPli_thread_sv_unregister( aTHX_ "Wx::PGPropArgCls", THIS, ST(0) );
                 delete THIS;
               %};
    
    %name{GetPtrDefault} wxPGProperty* GetPtr() const %Overload;
    
    %name{GetPtrPGInterface} wxPGProperty* GetPtr( wxPropertyGridInterface* iface ) const %Overload;
    
    /* wxPGProperty* GetPtr( const wxPropertyGridInterface* iface ) const; */
    
    wxPGProperty* GetPtr0() const;
    
    bool HasName() const;

    const wxString& GetName() const;
    
};


#endif


